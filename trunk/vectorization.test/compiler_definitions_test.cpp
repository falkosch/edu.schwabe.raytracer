#include "pch.h"

#include "vectorization/architecture/compiler_definitions.h"

TEST(CompilerDefinitions, HasIntrinsicsLevels) {
	EXPECT_EQ(0, VECTORIZATION_SSE);
	EXPECT_LT(VECTORIZATION_SSE, VECTORIZATION_SSE4);
	EXPECT_LT(VECTORIZATION_SSE4, VECTORIZATION_AVX);
	EXPECT_LT(VECTORIZATION_AVX, VECTORIZATION_AVX2);
	EXPECT_LT(VECTORIZATION_AVX2, VECTORIZATION_AVX512);

	EXPECT_LE(VECTORIZATION_SSE, VECTORIZATION_INTRINSICS_LEVEL);
	EXPECT_GE(VECTORIZATION_AVX512, VECTORIZATION_INTRINSICS_LEVEL);
}

TEST(CompilerDefinitions, HasEitherDebugOrNDebugSet) {
#if defined(DEBUG) && defined(NDEBUG)
	FAIL();
#endif
}

TEST(CompilerDefinitions, EnforcesIntrinsicsCodePathWhenCompilerFlagIsOn) {
#if defined(__AVX__)
	EXPECT_LE(VECTORIZATION_AVX, VECTORIZATION_INTRINSICS_LEVEL);
#endif

#if defined(__AVX2__)
	EXPECT_LE(VECTORIZATION_AVX2, VECTORIZATION_INTRINSICS_LEVEL);
#endif

#if defined(__AVX512F__)
	EXPECT_LE(VECTORIZATION_AVX512, VECTORIZATION_INTRINSICS_LEVEL);
#endif
}

TEST(CompilerDefinitions, HasAlignmentParameters) {
	EXPECT_LT(0, X86_ALIGNMENT);
	EXPECT_LT(X86_ALIGNMENT, MM_ALIGNMENT);
	EXPECT_LT(MM_ALIGNMENT, XMM_ALIGNMENT);
	EXPECT_LT(XMM_ALIGNMENT, YMM_ALIGNMENT);
	EXPECT_LT(YMM_ALIGNMENT, ZMM_ALIGNMENT);

	EXPECT_LT(0, ARCH_ALIGNMENT);
	EXPECT_GE(ZMM_ALIGNMENT, ARCH_ALIGNMENT);

	EXPECT_LT(0, BEST_ALIGNMENT);
	EXPECT_GE(ZMM_ALIGNMENT, BEST_ALIGNMENT);
}
